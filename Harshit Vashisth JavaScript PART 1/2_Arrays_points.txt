*  Arrays is a Refernce Data Types , it  is a Ordered collection of Items , We can also store 
   Different Data Types Inside it 
   It is a Object 
   It is a Mutable means can modified the Original Object
   In Primitive case , they are Immutable


        let fruits =[ "apple" , "mango" , "banana"];
        - Type of   [  console.log(typeof fruits)  ]
        - Is array is an Array   [ console.log(Array.isArray(fruits));  // TRUE ]

*  let obj ={}  //Object Literals 

*  PUSH - Inserting At End
        fruits.push("grapes");
        
*  POP - Removing From End  &&  It will Return the Last Element 
        fruits.pop();

*  UNSHIFT  - Inserting  At Start
        fruits.unshift("Lichi");

*  SHIFT  - Removing  From Start
        fruits.shift();

---  Push/Pop is faster than Shift/Unshift ( traverse all element )

*  Primitive VS Refernce DataTypes

    //Primitive DT

        let num1 = 10;
        let num2 =num1;
        console.log( "num1 :" , num1); //10
        console.log( "num2 :" , num2); //10

        num1++;
        console.log( "num1 :" , num1); //11
        console.log( "num2 :" , num2); //10

    //Reference DT

        let arr1 = ["cat" , "dog" , "cow"];
        let arr2 = arr1;
        console.log( "arr1 :" , arr1); //arr1 = ["cat" , "dog" , "cow"];
        console.log( "arr2 :" , arr2); //arr2 = ["cat" , "dog" , "cow"];
        arr1.push("BEAR");
        console.log( "arr1 :" , arr1); // arr1 : [ 'cat', 'dog', 'cow', 'BEAR' ]
        console.log( "arr2 :" , arr2); // arr2 : [ 'cat', 'dog', 'cow', 'BEAR' ]

    Primitive values are data that are stored on the stack. Primitive value is stored directly in the location that the variable accesses. Reference values are objects that are stored in the heap. Reference value stored in the variable location is a pointer to a location in memory where the object is stored. Refernece Location is stored in stack.


*  CLone an Array

        let arr3 = ["name" , "class"];
        let arr4 = arr3.slice(0);  
        let arr4 = arr3.slice(0).concat(["roll" , "no"]);  
        OR 
        let arr4 = [].concat(arr3 , ["roll" , "no"] );

        console.log( "arr3 :" , arr3); //arr3 : ["name" , "class"]
        console.log( "arr4 :" , arr4); //arr4 : ["name" , "class"]
        console.log( arr3 === arr4);  //False


*  Spread Operator
        let array3 = [...arr3]
        console.log( "array 3 :" , array3); //array 3 : ["name" , "class"]
        let array3 = [...arr3 , "roll" , "no"]

        let newArray = [...arr3 , ...arr4 ]


*  FOR Loop In array


        let mynum = ["name" , "class" , "roll" , "no"];
        for( let i =0 ; i<mynum.length ;i++){
            console.log(mynum[i]);
            console.log(mynum[i]).toUpperCase();
        }

            const myNum1 = [ 1, 2, 3 ,4];
            myNum1.push(6); //No errror as it will get push as We r not changing its address in memory;

            // If we do 
            myNum1 = [ 7, 8,9]; //Will show error

            { We can all array method & function in const only if u don't assign the array  myNum1 = [ 7, 8,9];}


*  While Loop 
        let mynum = ["name" , "class" , "roll" , "no"];
                While( i < mynum.length ){
                    console.log(mynum[i]);
                    i++
                }


*  For OF Loop

        const forOf  = [ 1, 2, 3 ,4];

        for( let i of forOf){
            console.log(i)
        }
        // 1 2 3 4  { Gives Value }


*  For IN Loop

        const forIN  = [ 1, 2, 3 ,4];

        for( let index in forIN){
            console.log(index)
        }
        // 0 1 2 3 { Gives Index }
    If u dont want index then print like this: console.log( forIN[index] )


*  Array Destructuring


        const  deArr1 = [ "value1", "Value2" , "value3" , "value4" ];

        const [x , y] = deArr1;
        console.log(x); //value1
        console.log(y); //value2


        const [a , , , b] = deArr1;
        console.log(a); //value1
        console.log(b); //value4

    Or Using 
    const deRemArray = deArr1.slice(1,3);
    console.log( deRemArray);  //  ["Value2" , "value3" ]

        const [p,q , ...remArray] = deArr1;
        console.log(p); //value1
        console.log(q); //value2
        console.log(remArray); // ["Value3" , "value4" ]


        const newArr = [... "abc"];
        console.log(newArr);// [ 'a', 'b', 'c' ]

        const newBrr = [... abc];
        console.log(newBrr); //ERROR

        const newCrr = [... "1234"];
        console.log(newCrr); // [ '1', '2', '3', '4' ]
        
        const newDrr = [... 1234];
        console.log(newDrr); //ERROR


{ 2_Array.js }